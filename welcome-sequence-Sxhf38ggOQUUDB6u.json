{"createdAt":"2025-09-22T04:41:02.965Z","updatedAt":"2025-09-22T08:38:51.029Z","id":"Sxhf38ggOQUUDB6u","name":"Welcome Sequence","active":false,"isArchived":true,"nodes":[{"parameters":{"operation":"get","tableId":"v_complete_client_context","filters":{"conditions":[{"keyName":"client_id","keyValue":"1650987991917x277951650850529760"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[208,-368],"id":"6c387f21-aa5e-4bd9-83dc-e0909d857b1e","name":"Get Client Complete Profile","executeOnce":false,"alwaysOutputData":false,"credentials":{"supabaseApi":{"id":"kTiEQ3ANtMyyNLPu","name":"Supabase account"}},"disabled":true},{"parameters":{"promptType":"define","text":"=You are a senior B2B lifecycle copywriter.\n\nYour task: generate a complete **welcome email sequence (5 emails)** for the following client.  \nAlways follow the voice, vocabulary, and guardrails provided.  \nNever invent facts, numbers, or names.  \nAvoid all “Words we don’t use” and “bad jargon”.  \nIf you must rephrase, use the “Words we use”.\n\n---\n\n## CLIENT CONTEXT (from Supabase view v_complete_client_context)\n\n{{JSON.stringify($json, null, 2)}}\n\nCTA_LABEL = Lean Marketing\nCTA_URL = https://leanmarketing.com/\n---\n\n## INSTRUCTIONS\n\n- Write 5 emails that progress naturally:\n  - **Email 1 (problem-aware)** → Show empathy for pains, introduce the offer softly, end with a soft CTA.  \n  - **Email 2 (solution-aware → product-aware)** → Authority + short story, address one objection, medium CTA.  \n  - **Email 3 (solution-aware)** → Teach something practical (checklist, how-to), subtle CTA.  \n  - **Email 4 (product-aware)** → Address top objections directly (cost, migration, support), strong CTA.  \n  - **Email 5 (most-aware)** → Recap transformation, create urgency, offer risk reversal, direct CTA.\n\n- Each email must align with:\n  - **Active segment**: \"primary\"\n  - **Tone**: Pragmatic Expertise, Structured Clarity, Collaborative Partnership  \n  - **Voice**: professional, plain English, short paragraphs, scannable  \n  - **Vocabulary**: use whitelist terms, avoid blacklist terms and banned jargon  \n  - **One CTA per email**, formatted in markdown: `[CTA_LABEL](CTA_URL)`  \n\n- Technical rules:\n  - `subject` ≤ 60 characters  \n  - `preview` ≤ 90 characters and not identical to subject  \n  - `body_markdown` ≥ 150 words, clean markdown, one CTA  \n  - Include `cta_label` separately  \n  - `awareness_angle` must be one of: problem-unaware | problem-aware | solution-aware | product-aware | most-aware  \n  - `objections_addressed` = array of objections covered in the email  \n  - `banned_terms_found` = array of any blacklisted terms you accidentally used (should be empty)\n\n---\n\n## OUTPUT FORMAT\n\nReturn **exactly this JSON structure** (no quotes, no commentary, no extra text):\n\n[\n  {\n    \"subject\": \"...\",\n    \"preview\": \"...\",\n    \"body_markdown\": \"...\",\n    \"cta_label\": \"...\",\n    \"awareness_angle\": \"...\",\n    \"objections_addressed\": [\"...\"],\n    \"banned_terms_found\": []\n  },\n  {\n    \"subject\": \"...\",\n    \"preview\": \"...\",\n    \"body_markdown\": \"...\",\n    \"cta_label\": \"...\",\n    \"awareness_angle\": \"...\",\n    \"objections_addressed\": [\"...\"],\n    \"banned_terms_found\": []\n  },\n  {\n    \"subject\": \"...\",\n    \"preview\": \"...\",\n    \"body_markdown\": \"...\",\n    \"cta_label\": \"...\",\n    \"awareness_angle\": \"...\",\n    \"objections_addressed\": [\"...\"],\n    \"banned_terms_found\": []\n  },\n  {\n    \"subject\": \"...\",\n    \"preview\": \"...\",\n    \"body_markdown\": \"...\",\n    \"cta_label\": \"...\",\n    \"awareness_angle\": \"...\",\n    \"objections_addressed\": [\"...\"],\n    \"banned_terms_found\": []\n  },\n  {\n    \"subject\": \"...\",\n    \"preview\": \"...\",\n    \"body_markdown\": \"...\",\n    \"cta_label\": \"...\",\n    \"awareness_angle\": \"...\",\n    \"objections_addressed\": [\"...\"],\n    \"banned_terms_found\": []\n  }\n]","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[672,48],"id":"fe6510cc-3622-4120-a6bf-edeea8bb8fad","name":"Business Agent","disabled":true},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-160,-320],"id":"d831ddcc-0701-48d3-91fe-b99d821fa922","name":"When clicking ‘Execute workflow’","disabled":true},{"parameters":{"model":{"__rl":true,"value":"gpt-4-turbo","mode":"list","cachedResultName":"gpt-4-turbo"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[688,192],"id":"5c9345f4-63f9-42d9-a178-e724f1294b81","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"wWUuB0CG0kTKBAtS","name":"OpenAi account | Lean Marketing"}},"disabled":true},{"parameters":{"respondWith":"allIncomingItems","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[816,-288],"id":"cd826130-a1d7-4090-b14c-8cd72aca3f4c","name":"Respond to Webhook","disabled":true},{"parameters":{"jsCode":"// === Helper fns ===\nfunction findTerms(text, terms) {\n  const hits = new Set();\n  const lower = (text || '').toLowerCase();\n  for (const t of terms || []) {\n    if (!t) continue;\n    const needle = String(t).toLowerCase().trim();\n    if (needle && lower.includes(needle)) hits.add(t);\n  }\n  return [...hits];\n}\n\nfunction wordCount(md) {\n  return (md || '')\n    .replace(/\\[[^\\]]*\\]\\([^)]+\\)/g, '') // strip links\n    .replace(/[`*_>#-]/g, ' ')\n    .split(/\\s+/).filter(Boolean).length;\n}\n\n// === Get input + normalize ===\nconst inItem = $input.first().json;\n\n// Try to find the emails array in common places\nlet emails = null;\nif (Array.isArray(inItem)) {\n  emails = inItem;                               // raw array (your case)\n} else if (Array.isArray(inItem.emails)) {\n  emails = inItem.emails;                        // emails property\n} else if (typeof inItem.output === 'string') {\n  try { const parsed = JSON.parse(inItem.output); if (Array.isArray(parsed)) emails = parsed; } catch {}\n} else if (typeof inItem.text === 'string') {\n  try { const parsed = JSON.parse(inItem.text); if (Array.isArray(parsed)) emails = parsed; } catch {}\n}\nif (!emails) throw new Error('QA node: could not find emails array. Ensure the AI node returns a JSON array of 5 email objects.');\n\n// Optional: context passed from upstream (keep undefined if not available)\nconst ctx = inItem.context || {};\n\n// Build vocab lists\nconst bannedTerms = [\n  ...((ctx.words_we_dont_use?.marketing_avoid_terminology || []).map(x => x.term).filter(Boolean)),\n  ...((ctx.industry_jargon?.bad_jargon || []).map(x => x.term).filter(Boolean)),\n];\nconst allowedTerms = [\n  ...((ctx.words_we_use?.marketing_terminology || []).map(x => x.term).filter(Boolean)),\n];\n\nconst allowedAngles = new Set(['problem-unaware','problem-aware','solution-aware','product-aware','most-aware']);\n\nconst qa_report = [];\nconst regen_instructions = [];\nlet need_regen = false;\n\nif (emails.length !== 5) {\n  throw new Error(`QA node: expected 5 emails, got ${emails.length}.`);\n}\n\nemails.forEach((e, idx) => {\n  const issues = [];\n  const fixes = [];\n\n  // 1) Structure\n  if (!e.subject) { issues.push('Missing subject'); fixes.push('Add a subject.'); }\n  if (!e.preview) { issues.push('Missing preview'); fixes.push('Add a preview.'); }\n  if (!e.body_markdown) { issues.push('Missing body_markdown'); fixes.push('Add a markdown body.'); }\n  if (!e.cta_label) { issues.push('Missing cta_label'); fixes.push('Provide a non-empty CTA label.'); }\n  if (!e.awareness_angle || !allowedAngles.has(e.awareness_angle)) {\n    issues.push('Invalid awareness_angle');\n    fixes.push('Set awareness_angle to one of: problem-unaware | problem-aware | solution-aware | product-aware | most-aware.');\n  }\n\n  // 2) Length constraints\n  if ((e.subject || '').length > 60) { issues.push(`Subject too long (${e.subject.length})`); fixes.push('Shorten subject to ≤ 60 characters.'); }\n  if ((e.preview || '').length > 90) { issues.push(`Preview too long (${e.preview.length})`); fixes.push('Shorten preview to ≤ 90 characters.'); }\n  if (e.subject && e.preview && e.subject.trim().toLowerCase() === e.preview.trim().toLowerCase()) {\n    issues.push('Preview duplicates subject'); fixes.push('Rewrite preview so it complements (not duplicates) the subject.');\n  }\n\n  // 3) Body length\n  const wc = wordCount(e.body_markdown || '');\n  if (wc < 150) { issues.push(`Body too short (${wc} words)`); fixes.push('Expand body to at least 150 words with scannable paragraphs.'); }\n\n  // 4) Exactly one CTA in body\n  const ctaMatches = (e.body_markdown || '').match(/\\[[^\\]]+\\]\\(CTA_URL\\)/g) || [];\n  if (ctaMatches.length === 0) { issues.push('Missing CTA'); fixes.push('Add exactly one CTA `[CTA_LABEL](CTA_URL)` in the body.'); }\n  if (ctaMatches.length > 1) { issues.push('Multiple CTAs'); fixes.push('Keep exactly one CTA link in the body.'); }\n\n  // 5) Banned terms\n  const corpus = [e.subject || '', e.preview || '', e.body_markdown || ''].join('\\n');\n  const bannedHits = findTerms(corpus, bannedTerms);\n  if (bannedHits.length) {\n    issues.push(`Banned terms present: ${bannedHits.join(', ')}`);\n    fixes.push(`Remove or rephrase banned terms: ${bannedHits.join(', ')}. Use allowed vocabulary instead.`);\n    e.banned_terms_found = bannedHits;\n  } else {\n    e.banned_terms_found = [];\n  }\n\n  // 6) Encourage whitelist usage (>=2)\n  const whitelistHits = findTerms(corpus, allowedTerms);\n  if (whitelistHits.length < 2) {\n    issues.push('Not enough whitelisted vocabulary');\n    fixes.push(`Naturally include at least two allowed terms (e.g., ${allowedTerms.slice(0,5).join(', ')}).`);\n  }\n\n  const passed = issues.length === 0;\n  qa_report.push({ index: idx, passed, issues });\n\n  if (!passed) {\n    need_regen = true;\n    const instruction = [\n      `Regenerate Email ${idx + 1} only.`,\n      'Keep the same intent and awareness angle for this step.',\n      ...fixes.map(f => `- ${f}`),\n      'Constraints:',\n      '- subject ≤ 60 chars; preview ≤ 90 chars; body ≥ 150 words.',\n      '- Exactly one CTA in markdown: `[CTA_LABEL](CTA_URL)`.',\n      '- Avoid all banned terms; do not use bad jargon.',\n      '- Tone: Pragmatic Expertise, Structured Clarity, Collaborative Partnership.',\n      'Return a single JSON object with the same fields.',\n    ].join('\\n');\n\n    regen_instructions.push({ index: idx, instruction, failing_email: e });\n  } else {\n    regen_instructions.push(null);\n  }\n});\n\nreturn [{ json: { emails, qa_report, need_regen, regen_instructions, context: ctx } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[576,-288],"id":"bf3ff9af-4c99-4e53-8f3d-53de6d5e3dbf","name":"Code","disabled":true},{"parameters":{"httpMethod":"POST","path":"getWelcomeSequence","responseMode":"lastNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[-192,-80],"id":"8012b5c3-f935-4759-81e6-987b081716ec","name":"Webhook","webhookId":"9cb17666-6744-4666-a876-ddecd2409481"},{"parameters":{"respondWith":"noData","options":{"responseCode":200}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[176,-80],"id":"68669cb9-a089-4d97-b182-569a2951e7a9","name":"Respond to Webhook1"}],"connections":{"Get Client Complete Profile":{"main":[[]]},"When clicking ‘Execute workflow’":{"main":[[]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"Business Agent","type":"ai_languageModel","index":0}]]},"Business Agent":{"main":[[]]},"Code":{"main":[[]]},"Webhook":{"main":[[{"node":"Respond to Webhook1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a4c926eb-a475-4d73-9ff5-21f3d456b61b","triggerCount":1,"shared":[{"createdAt":"2025-09-22T04:41:02.965Z","updatedAt":"2025-09-22T04:41:02.965Z","role":"workflow:owner","workflowId":"Sxhf38ggOQUUDB6u","projectId":"oeHwV8sNrbPNhUov"}],"tags":[]}